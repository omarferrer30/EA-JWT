{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"./auth.service\";\nexport class TokenInterceptorService {\n  constructor(authService) {\n    this.authService = authService;\n  }\n  /*   intercept(req: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {\n      const tokenizedReq = req.clone({\n        setHeaders: {\n          Authorization: `Bearer ${this.authService.getToken()}`\n        }\n      });\n      return next.handle(tokenizedReq);\n    } */\n  intercept(req, next) {\n    const tokenizedReq = req.clone({\n      setHeaders: {\n        Authorization: `Bearer ${this.authService.getToken()}`\n      }\n    });\n    return next.handle(tokenizedReq);\n  }\n  static #_ = this.ɵfac = function TokenInterceptorService_Factory(t) {\n    return new (t || TokenInterceptorService)(i0.ɵɵinject(i1.AuthService));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: TokenInterceptorService,\n    factory: TokenInterceptorService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"names":["TokenInterceptorService","constructor","authService","intercept","req","next","tokenizedReq","clone","setHeaders","Authorization","getToken","handle","_","i0","ɵɵinject","i1","AuthService","_2","factory","ɵfac","providedIn"],"sources":["C:\\Users\\super\\Desktop\\EA\\angular-nodejs-jwt\\frontend\\src\\app\\services\\token-interceptor.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport {HttpInterceptor} from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { AuthService } from './auth.service';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class TokenInterceptorService implements HttpInterceptor {\n\n  constructor(\n    private authService: AuthService\n  ) { }\n\n/*   intercept(req: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {\n    const tokenizedReq = req.clone({\n      setHeaders: {\n        Authorization: `Bearer ${this.authService.getToken()}`\n      }\n    });\n    return next.handle(tokenizedReq);\n  } */\n  intercept(req,next){\n    const tokenizedReq=req.clone({\n      setHeaders:{\n        Authorization:`Bearer ${this.authService.getToken()}`\n      }\n    })\n    return next.handle(tokenizedReq);\n  }\n}"],"mappings":";;AAQA,OAAM,MAAOA,uBAAuB;EAElCC,YACUC,WAAwB;IAAxB,KAAAA,WAAW,GAAXA,WAAW;EACjB;EAEN;;;;;;;;EAQEC,SAASA,CAACC,GAAG,EAACC,IAAI;IAChB,MAAMC,YAAY,GAACF,GAAG,CAACG,KAAK,CAAC;MAC3BC,UAAU,EAAC;QACTC,aAAa,EAAC,UAAU,IAAI,CAACP,WAAW,CAACQ,QAAQ,EAAE;;KAEtD,CAAC;IACF,OAAOL,IAAI,CAACM,MAAM,CAACL,YAAY,CAAC;EAClC;EAAC,QAAAM,CAAA,G;qBArBUZ,uBAAuB,EAAAa,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,WAAA;EAAA;EAAA,QAAAC,EAAA,G;WAAvBjB,uBAAuB;IAAAkB,OAAA,EAAvBlB,uBAAuB,CAAAmB,IAAA;IAAAC,UAAA,EAFtB;EAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}