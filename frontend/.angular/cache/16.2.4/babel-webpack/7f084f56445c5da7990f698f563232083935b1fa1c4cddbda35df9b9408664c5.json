{"ast":null,"code":"import { HttpHeaders } from '@angular/common/http';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class TaskService {\n  constructor(http) {\n    this.http = http;\n    this.URL = 'http://localhost:3000/api';\n  }\n  getPrivateTasks() {\n    const token = this.getToken();\n    let headers = new HttpHeaders();\n    if (token !== null) {\n      headers = headers.set(\"x-access-token\", token);\n    } else {}\n    return this.http.get(`${this.URL}/me`, {\n      headers\n    });\n  }\n  getPublicProfile() {\n    const token = this.getToken();\n    let headers = new HttpHeaders();\n    if (token !== null) {\n      headers = headers.set(\"x-access-token\", token);\n    } else {\n      // Manejo de error si no hay token\n    }\n    return this.http.get(`${this.URL}/public`, {\n      headers\n    });\n  }\n  getToken() {\n    return localStorage.getItem('token');\n  }\n  static #_ = this.ɵfac = function TaskService_Factory(t) {\n    return new (t || TaskService)(i0.ɵɵinject(i1.HttpClient));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: TaskService,\n    factory: TaskService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"names":["HttpHeaders","TaskService","constructor","http","URL","getPrivateTasks","token","getToken","headers","set","get","getPublicProfile","localStorage","getItem","_","i0","ɵɵinject","i1","HttpClient","_2","factory","ɵfac","providedIn"],"sources":["C:\\Users\\super\\Desktop\\EA\\angular-nodejs-jwt\\frontend\\src\\app\\services\\tasks.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class TaskService {\n  private URL = 'http://localhost:3000/api';\n\n  constructor(private http: HttpClient) { }\n\n  getPrivateTasks() {\n    \n    const token = this.getToken();\n    \n    let headers = new HttpHeaders();\n    if (token !== null) {\n      headers = headers.set(\"x-access-token\", token);\n    } else {\n      \n    }   \n    return this.http.get<any>(`${this.URL}/me`, { headers });\n  }\n\n  getPublicProfile() {\n    const token = this.getToken();\n\n    let headers = new HttpHeaders();\n    if (token !== null) {\n      headers = headers.set(\"x-access-token\", token);\n    } else {\n      // Manejo de error si no hay token\n    }\n\n    return this.http.get<any>(`${this.URL}/public`, { headers });\n  }\n\n  getToken() {\n    return localStorage.getItem('token');\n  }\n}\n"],"mappings":"AACA,SAAqBA,WAAW,QAAQ,sBAAsB;;;AAK9D,OAAM,MAAOC,WAAW;EAGtBC,YAAoBC,IAAgB;IAAhB,KAAAA,IAAI,GAAJA,IAAI;IAFhB,KAAAC,GAAG,GAAG,2BAA2B;EAED;EAExCC,eAAeA,CAAA;IAEb,MAAMC,KAAK,GAAG,IAAI,CAACC,QAAQ,EAAE;IAE7B,IAAIC,OAAO,GAAG,IAAIR,WAAW,EAAE;IAC/B,IAAIM,KAAK,KAAK,IAAI,EAAE;MAClBE,OAAO,GAAGA,OAAO,CAACC,GAAG,CAAC,gBAAgB,EAAEH,KAAK,CAAC;KAC/C,MAAM,C;IAGP,OAAO,IAAI,CAACH,IAAI,CAACO,GAAG,CAAM,GAAG,IAAI,CAACN,GAAG,KAAK,EAAE;MAAEI;IAAO,CAAE,CAAC;EAC1D;EAEAG,gBAAgBA,CAAA;IACd,MAAML,KAAK,GAAG,IAAI,CAACC,QAAQ,EAAE;IAE7B,IAAIC,OAAO,GAAG,IAAIR,WAAW,EAAE;IAC/B,IAAIM,KAAK,KAAK,IAAI,EAAE;MAClBE,OAAO,GAAGA,OAAO,CAACC,GAAG,CAAC,gBAAgB,EAAEH,KAAK,CAAC;KAC/C,MAAM;MACL;IAAA;IAGF,OAAO,IAAI,CAACH,IAAI,CAACO,GAAG,CAAM,GAAG,IAAI,CAACN,GAAG,SAAS,EAAE;MAAEI;IAAO,CAAE,CAAC;EAC9D;EAEAD,QAAQA,CAAA;IACN,OAAOK,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;EACtC;EAAC,QAAAC,CAAA,G;qBAjCUb,WAAW,EAAAc,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;EAAA;EAAA,QAAAC,EAAA,G;WAAXlB,WAAW;IAAAmB,OAAA,EAAXnB,WAAW,CAAAoB,IAAA;IAAAC,UAAA,EAFV;EAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}