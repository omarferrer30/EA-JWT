{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"@angular/router\";\nexport class AuthService {\n  constructor(http, router) {\n    this.http = http;\n    this.router = router;\n    this.URL = 'http://localhost:3000/api/';\n  }\n  signUp(user) {\n    return this.http.post(this.URL + '/signup', user);\n  }\n  signIn(user) {\n    return this.http.post(this.URL + '/signin', user);\n  }\n  loggedIn() {\n    return !!localStorage.getItem('token');\n  }\n  getToken() {\n    return localStorage.getItem('token');\n  }\n  logout() {\n    localStorage.removeItem('token');\n    this.router.navigate(['/signin']);\n  }\n  inicio() {\n    return this.http.get(this.URL + '/inicio').subscribe(res => {\n      console.log(res);\n    }, err => console.log(err));\n  }\n  static #_ = this.ɵfac = function AuthService_Factory(t) {\n    return new (t || AuthService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.Router));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AuthService,\n    factory: AuthService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"names":["AuthService","constructor","http","router","URL","signUp","user","post","signIn","loggedIn","localStorage","getItem","getToken","logout","removeItem","navigate","inicio","get","subscribe","res","console","log","err","_","i0","ɵɵinject","i1","HttpClient","i2","Router","_2","factory","ɵfac","providedIn"],"sources":["C:\\Users\\super\\Desktop\\EA\\angular-nodejs-jwt\\frontend\\src\\app\\services\\auth.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport {Router} from '@angular/router';\n\n\n// Define una interfaz que describe la estructura de 'user'\ninterface User {\n  email: string;\n  password: string;\n  // Otras propiedades de 'user'\n}\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AuthService {\n\n  private URL = 'http://localhost:3000/api/'\n\n  constructor(private http: HttpClient,private router:Router) { }\n\n  signUp(user: User) { // Especifica el tipo de 'user' como 'User'\n    return this.http.post<any>(this.URL + '/signup', user);\n  }\n  signIn(user: User) { // Especifica el tipo de 'user' como 'User'\n    return this.http.post<any>(this.URL + '/signin', user);\n  }\n  loggedIn() {\n    return !!localStorage.getItem('token');\n  }\n\n  getToken() {\n    return localStorage.getItem('token')\n  }\n\n  logout(){\n    localStorage.removeItem('token');\n    this.router.navigate(['/signin']);\n  }\n\n  inicio() {\n    return this.http.get(this.URL + '/inicio').subscribe(\n      res => {\n        console.log(res);\n      },\n      err => console.log(err)\n    )\n  }\n}\n"],"mappings":";;;AAeA,OAAM,MAAOA,WAAW;EAItBC,YAAoBC,IAAgB,EAASC,MAAa;IAAtC,KAAAD,IAAI,GAAJA,IAAI;IAAqB,KAAAC,MAAM,GAANA,MAAM;IAF3C,KAAAC,GAAG,GAAG,4BAA4B;EAEoB;EAE9DC,MAAMA,CAACC,IAAU;IACf,OAAO,IAAI,CAACJ,IAAI,CAACK,IAAI,CAAM,IAAI,CAACH,GAAG,GAAG,SAAS,EAAEE,IAAI,CAAC;EACxD;EACAE,MAAMA,CAACF,IAAU;IACf,OAAO,IAAI,CAACJ,IAAI,CAACK,IAAI,CAAM,IAAI,CAACH,GAAG,GAAG,SAAS,EAAEE,IAAI,CAAC;EACxD;EACAG,QAAQA,CAAA;IACN,OAAO,CAAC,CAACC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;EACxC;EAEAC,QAAQA,CAAA;IACN,OAAOF,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;EACtC;EAEAE,MAAMA,CAAA;IACJH,YAAY,CAACI,UAAU,CAAC,OAAO,CAAC;IAChC,IAAI,CAACX,MAAM,CAACY,QAAQ,CAAC,CAAC,SAAS,CAAC,CAAC;EACnC;EAEAC,MAAMA,CAAA;IACJ,OAAO,IAAI,CAACd,IAAI,CAACe,GAAG,CAAC,IAAI,CAACb,GAAG,GAAG,SAAS,CAAC,CAACc,SAAS,CAClDC,GAAG,IAAG;MACJC,OAAO,CAACC,GAAG,CAACF,GAAG,CAAC;IAClB,CAAC,EACDG,GAAG,IAAIF,OAAO,CAACC,GAAG,CAACC,GAAG,CAAC,CACxB;EACH;EAAC,QAAAC,CAAA,G;qBAhCUvB,WAAW,EAAAwB,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA,GAAAH,EAAA,CAAAC,QAAA,CAAAG,EAAA,CAAAC,MAAA;EAAA;EAAA,QAAAC,EAAA,G;WAAX9B,WAAW;IAAA+B,OAAA,EAAX/B,WAAW,CAAAgC,IAAA;IAAAC,UAAA,EAFV;EAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}