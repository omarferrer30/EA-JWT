{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"../services/auth.service\";\nexport class TokenInterceptorService {\n  constructor(authService) {\n    this.authService = authService;\n  }\n  intercept(req, next) {\n    const token = localStorage.getItem('token');\n    if (token) {\n      const tokenizeReq = req.clone({\n        setHeaders: {\n          Authorization: `Bearer ${this.authService.getToken()}`\n        }\n      });\n      return next.handle(tokenizeReq);\n    }\n    return next.handle(req);\n  }\n  static #_ = this.ɵfac = function TokenInterceptorService_Factory(t) {\n    return new (t || TokenInterceptorService)(i0.ɵɵinject(i1.AuthService));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: TokenInterceptorService,\n    factory: TokenInterceptorService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"names":["TokenInterceptorService","constructor","authService","intercept","req","next","token","localStorage","getItem","tokenizeReq","clone","setHeaders","Authorization","getToken","handle","_","i0","ɵɵinject","i1","AuthService","_2","factory","ɵfac","providedIn"],"sources":["C:\\Users\\super\\Desktop\\EA\\angular-nodejs-jwt\\frontend\\src\\app\\services\\token-interceptor.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpInterceptor, HttpRequest, HttpHandler, HttpEvent, } from '@angular/common/http'; // Importa HttpRequest\nimport { Observable } from 'rxjs';\nimport { AuthService } from '../services/auth.service';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class TokenInterceptorService implements HttpInterceptor {\n  constructor(\n    private authService: AuthService\n  ) { }\n  intercept(req: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {\n    const token = localStorage.getItem('token');\n\n    if (token) {\n      const tokenizeReq = req.clone({\n        setHeaders: {\n          Authorization: `Bearer ${this.authService.getToken()}`\n        }\n      })\n      return next.handle(tokenizeReq)\n    }\n    return next.handle(req)\n  }\n  }\n"],"mappings":";;AAQA,OAAM,MAAOA,uBAAuB;EAClCC,YACUC,WAAwB;IAAxB,KAAAA,WAAW,GAAXA,WAAW;EACjB;EACJC,SAASA,CAACC,GAAqB,EAAEC,IAAiB;IAChD,MAAMC,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;IAE3C,IAAIF,KAAK,EAAE;MACT,MAAMG,WAAW,GAAGL,GAAG,CAACM,KAAK,CAAC;QAC5BC,UAAU,EAAE;UACVC,aAAa,EAAE,UAAU,IAAI,CAACV,WAAW,CAACW,QAAQ,EAAE;;OAEvD,CAAC;MACF,OAAOR,IAAI,CAACS,MAAM,CAACL,WAAW,CAAC;;IAEjC,OAAOJ,IAAI,CAACS,MAAM,CAACV,GAAG,CAAC;EACzB;EAAC,QAAAW,CAAA,G;qBAhBUf,uBAAuB,EAAAgB,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,WAAA;EAAA;EAAA,QAAAC,EAAA,G;WAAvBpB,uBAAuB;IAAAqB,OAAA,EAAvBrB,uBAAuB,CAAAsB,IAAA;IAAAC,UAAA,EAFtB;EAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}